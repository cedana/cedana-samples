name: Publish

permissions:
  contents: write
  packages: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      github:
        type: boolean
        description: "Publish to GitHub releases"
        required: false
        default: false
      dockerhub:
        type: boolean
        description: "Publish images to Docker Hub"
        required: false
        default: false
      post_summary:
        type: boolean
        description: "Post summary to Slack"
        required: false
        default: false

jobs:
  github:
    name: GitHub
    if: inputs.github
    runs-on: ubuntu-latest
    steps:
      - uses: runs-on/action@v1

      - name: Create release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.head_ref || github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="$tag" \
              --generate-notes

  dockerhub:
    name: DockerHub
    runs-on: ubuntu-latest
    if: ${{ inputs.dockerhub }}
    strategy:
      fail-fast: false
      matrix:
        cuda_version:
          - 12.2
          - 12.4
          - 12.8
        torch_version:
          - 2.5
          - 2.6
          - 2.7
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.cuda_version }}-${{ matrix.torch_version }}-*
          merge-multiple: true

      - name: Download image name
        uses: actions/download-artifact@v4
        with:
          path: /tmp/image-name
          name: image-name
          merge-multiple: true

      - name: Check directories and set variables
        id: check_dirs
        run: echo "IMAGE_NAME=$(cat /tmp/image-name/name.txt)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.check_dirs.outputs.IMAGE_NAME }}
          tags: |
            type=raw,value=cuda${{ matrix.cuda_version }}-torch${{ matrix.torch_version }}
            type=raw,value=cuda${{ matrix.cuda_version }}-torch${{ matrix.torch_version }}-${{ github.head_ref || github.ref_name }}
            ${{ (matrix.cuda_version == '12.8' && matrix.torch_version == '2.7') && 'type=raw,value=cuda' || '' }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.check_dirs.outputs.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.check_dirs.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  dockerhub-supplementary:
    name: DockerHub
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - compbio
      fail-fast: false
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.image }}-*
          merge-multiple: true

      - name: Download image name
        uses: actions/download-artifact@v4
        with:
          path: /tmp/image-name
          name: image-name
          merge-multiple: true

      - name: Check directories and set variables
        id: check_dirs
        run: echo "IMAGE_NAME=$(cat /tmp/image-name/name.txt)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.check_dirs.outputs.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.image }}
            type=raw,value=${{ matrix.image }}-${{ github.head_ref || github.ref_name }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.check_dirs.outputs.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.check_dirs.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  post-summary:
    name: Post Summary
    runs-on: ubuntu-latest
    needs: [dockerhub, dockerhub-supplementary, github]
    if: inputs.post_summary
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          fetch-tags: true

      - name: Get tag
        id: tag
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | sed -n '1p')

      - name: Get previous tag
        id: previous-tag
        run: |
          echo ::set-output name=tag::$(git tag --sort=-creatordate | sed -n '2p')

      - name: Get release info
        id: release-info
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          token: ${{ github.token }}
          excludes: draft
          repository: ${{ github.repository }}

      - name: Generate summary
        id: summary
        env:
          RELEASE_TITLE: "cedana-samples"
          RELEASE_DESCRIPTION: "**${{ steps.tag.outputs.tag }}**"
          RELEASE_NOTES_URL: https://github.com/${{ github.repository }}/releases/${{ steps.tag.outputs.tag }}
          RELEASE_BODY: "${{ steps.release-info.outputs.description }}"
          TAG: ${{ steps.tag.outputs.tag }}
          PREVIOUS_TAG: ${{ steps.previous-tag.outputs.tag }}
        run: |
          echo $RELEASE_BODY > $GITHUB_STEP_SUMMARY
          echo ::set-output name=slack-summary::$(scripts/ci/release-summary-slack)

      - name: Post summary
        id: slack-patch
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_RELEASE }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            ${{ steps.summary.outputs.slack-summary }}
